[project]
name = "{{ cookiecutter.dist_name }}"
authors = [
  { name = "{{ cookiecutter.dist_name }}", email = "{{ cookiecutter.email }}" }
]
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
dynamic = ["version"]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">={{ cookiecutter.python_version }}"
dependencies = [
]

[project.urls]
Documentation = "{{ cookiecutter.docs_url }}"
Source = "{{ cookiecutter.repository_url }}"

[tool.hatch]

[tool.hatch.metadata]
allow-direct-references = true


##############
# Versioning #
##############

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }


[tool.hatch.build.hooks.vcs]
version-file = "src/{{ cookiecutter.package_name }}/_version.py"


##################
# External Tools #
##################

[tool.mypy]
files = ["{{cookiecutter.package_name}}"]
exclude = ["build/", "dist/", "docs/", "tests/*"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
{% if cookiecutter.pydantic == "Y" -%}
  plugins = ["pydantic.mypy"]
{%- endif %}


[tool.ruff]
target-version = "py{{ cookiecutter.python_version | replace(".", "") }}"
line-length = 120
indent-width = 4
include = [
  "src/**/*.py",
  "src/**/*.pyi",
  "tests/**/*.py",
  "tests/**/*.pyi"
]

[tool.ruff.lint]
preview = true # preview features & checks, use with caution
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "ICN",
    "ISC",
    "I",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter
]


[tool.ruff.format]
# be more like black
quote-style = "single"


[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]


[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


[tool.pytest.ini_options]
addopts = "--cov=src/{{ cookiecutter.package_name }}/ --cov-report=term-missing"
{% if cookiecutter.asyncio == "Y" -%}
asyncio_mode = "strict"
{%- endif %}

[tool.coverage.run]
branch = true
source = ["src/{{ cookiecutter.package_name }}"]
omit = [
  # automatically created by hatch-vcs, not in repo
  "_version.py",
]

[tool.coverage.paths]
source = [
  "src/",
  "*/site-packages/",
]


#####################
# Environment Setup #
#####################

{%- if cookiecutter.lock_file_support %}
[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11"]
{%- endif %}


# Default env dendencies
[tool.hatch.envs.default]
dependencies = [
  {% if cookiecutter.pydantic == "Y" -%}
  "pydantic",
  {%- endif %}
]
post-install-commands = ["pre-commit install"]
{%- if cookiecutter.lock_file_support %}
type = "pip-compile"
# keep locks between default & others consistent
pip-compile-constraint = "default"
lock-filename = "locks/{env_name}.lock"
pip-compile-hashes = true
{%- endif %}
{%- if cookiecutter.lock_file_support %}
[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE='{args}' hatch env run --env {env_name} -- python --version"
{%- endif %}


# Lint env dendencies
[tool.hatch.envs.lint]
dependencies = [
  "mypy",
  "ruff",
{% if cookiecutter.deptry == "Y" -%}
  "deptry",
{% endif -%}
]


[tool.hatch.envs.lint.scripts]
typing = [
  "echo \"VERSION: `mypy --version`\"",
  "mypy --install-types --non-interactive {args}"
]
lint = [
  "echo \"VERSION: `ruff --version`\"",
  "ruff format .",
  "ruff --fix .",
  "mypy src/{{ cookiecutter.package_name }}/",
]
lint-check = [
  "echo \"VERSION: `ruff --version`\"",
  "ruff format --check .",
  "ruff .",
  "mypy src/{{ cookiecutter.package_name }}/",
]

# Docs env dendencies
[tool.hatch.envs.docs]
dependencies = [
{% if cookiecutter.mkdocs == "Y" -%}
  "mkdocs",
  "mkdocs-material",
  "mkdocs-gen-files",
  "mkdocstrings[python]",
  "linkchecker",
{%- endif %}
]


[tool.hatch.envs.docs.scripts]
docs-serve = "mkdocs serve"
docs-build = "mkdocs build --clean --strict"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
  "docs-build",
  "validate",
]

# Testing env dendencies
[tool.hatch.envs.test]
dependencies = [
  "pytest",
{% if cookiecutter.codecov == "Y" -%}
  "pytest-cov",
{% endif -%}
{% if cookiecutter.asyncio == "Y" -%}
  "pytest-asyncio",
  {%- endif %}
]


[tool.hatch.envs.test.scripts]
test = "pytest"
test-cov-xml = "pytest --cov-report=xml"


# Replace tox & nox
[[tool.hatch.envs.test.matrix]]
python = ["{{ cookiecutter.python_version }}"]

#########
# Build #
#########

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
]

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}/"]